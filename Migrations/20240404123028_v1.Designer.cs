// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using My_Pro.Data;

#nullable disable

namespace My_Pro.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240404123028_v1")]
    partial class v1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("My_Pro.Model.Entity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("CodeValidation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirtName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("My_Pro.Model.Entity.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UsersId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("UsersId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("My_Pro.Model.Entity.BookingService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("ServiceId");

                    b.ToTable("BookingServices");
                });

            modelBuilder.Entity("My_Pro.Model.Entity.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PricePerNight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Phòng 101",
                            IsDeleted = false,
                            Name = "Phòng 101",
                            PricePerNight = 150m,
                            RoomTypeId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Phòng 102",
                            IsDeleted = false,
                            Name = "Phòng 102",
                            PricePerNight = 150m,
                            RoomTypeId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            Description = "Phòng 103",
                            IsDeleted = false,
                            Name = "Phòng 103",
                            PricePerNight = 200m,
                            RoomTypeId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            Description = "Phòng 104",
                            IsDeleted = false,
                            Name = "Phòng 104",
                            PricePerNight = 200m,
                            RoomTypeId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 5,
                            Description = "Phòng 201",
                            IsDeleted = false,
                            Name = "Phòng 201",
                            PricePerNight = 250m,
                            RoomTypeId = 2,
                            Status = 1
                        },
                        new
                        {
                            Id = 6,
                            Description = "Phòng 202",
                            IsDeleted = false,
                            Name = "Phòng 202",
                            PricePerNight = 250m,
                            RoomTypeId = 2,
                            Status = 1
                        },
                        new
                        {
                            Id = 7,
                            Description = "Phòng 203",
                            IsDeleted = false,
                            Name = "Phòng 203",
                            PricePerNight = 300m,
                            RoomTypeId = 2,
                            Status = 1
                        },
                        new
                        {
                            Id = 8,
                            Description = "Phòng 301",
                            IsDeleted = false,
                            Name = "Phòng 301",
                            PricePerNight = 350m,
                            RoomTypeId = 3,
                            Status = 1
                        },
                        new
                        {
                            Id = 9,
                            Description = "Phòng 302",
                            IsDeleted = false,
                            Name = "Phòng 302",
                            PricePerNight = 350m,
                            RoomTypeId = 3,
                            Status = 1
                        },
                        new
                        {
                            Id = 10,
                            Description = "Phòng 401",
                            IsDeleted = false,
                            Name = "Phòng 401",
                            PricePerNight = 400m,
                            RoomTypeId = 4,
                            Status = 1
                        });
                });

            modelBuilder.Entity("My_Pro.Model.Entity.RoomImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomImages");
                });

            modelBuilder.Entity("My_Pro.Model.Entity.RoomType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RoomTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Phòng dành cho một người, thường có một giường đơn.",
                            IsDeleted = false,
                            Name = "Phòng Đơn (Single Room)"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Phòng dành cho hai người, thường có một giường đôi.",
                            IsDeleted = false,
                            Name = "Phòng Đôi (Double Room)"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Phòng dành cho một gia đình hoặc một nhóm người, thường có nhiều giường hoặc giường đôi lớn để phù hợp với nhiều người.",
                            IsDeleted = false,
                            Name = "Phòng Gia Đình (Family Room)"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Một loại phòng cao cấp có diện tích lớn hơn, thường bao gồm khu vực sống và khu vực ngủ riêng biệt. Có thể có các tiện nghi cao cấp như phòng tắm riêng, phòng khách riêng, vv.",
                            IsDeleted = false,
                            Name = "Suite"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Một phiên bản nâng cấp của phòng đơn hoặc phòng đôi, thường có các tiện nghi cao cấp hơn như không gian rộng rãi hơn, quang cảnh tốt hơn, vv.",
                            IsDeleted = false,
                            Name = "Phòng Deluxe (Deluxe Room)"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Phòng dành cho những khách hàng có nhu cầu kinh doanh, thường có các tiện nghi làm việc như bàn làm việc và kết nối Internet cao cấp.",
                            IsDeleted = false,
                            Name = "Phòng Executive"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Phòng có tầm nhìn ra biển, thường có cửa sổ hoặc ban công nhìn ra biển.",
                            IsDeleted = false,
                            Name = "Phòng Hướng Biển (Ocean View Room)"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Phòng có tầm nhìn ra thành phố, thường có cửa sổ hoặc ban công nhìn ra các tòa nhà và cảnh đô thị.",
                            IsDeleted = false,
                            Name = "Phòng Hướng Thành Phố (City View Room)"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Phòng lớn có thể chứa một nhóm người, thường được sử dụng cho các đoàn du lịch hoặc hội nghị.",
                            IsDeleted = false,
                            Name = "Phòng Hợp Nhóm (Group Room)"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Loại phòng sang trọng ở trên cùng của khách sạn, thường có diện tích lớn, quang cảnh tốt nhất và các tiện nghi cao cấp như hồ bơi riêng, sân thượng riêng, vv.",
                            IsDeleted = false,
                            Name = "Phòng Penthouse"
                        });
                });

            modelBuilder.Entity("My_Pro.Model.Entity.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ServiceTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Một loạt các lựa chọn sáng",
                            IsDeleted = false,
                            Name = "Buffet Sáng",
                            Price = 15m,
                            ServiceTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Truy cập vào hồ bơi của khách sạn",
                            IsDeleted = false,
                            Name = "Tiện ích Hồ Bơi",
                            Price = 10m,
                            ServiceTypeId = 3
                        },
                        new
                        {
                            Id = 3,
                            Description = "Massage thư giãn tại spa của khách sạn",
                            IsDeleted = false,
                            Name = "Massage Spa",
                            Price = 50m,
                            ServiceTypeId = 2
                        },
                        new
                        {
                            Id = 4,
                            Description = "Thuê phòng họp cho các cuộc họp",
                            IsDeleted = false,
                            Name = "Thuê Phòng Họp",
                            Price = 100m,
                            ServiceTypeId = 4
                        },
                        new
                        {
                            Id = 5,
                            Description = "Dịch vụ làm sạch hàng ngày cho phòng",
                            IsDeleted = false,
                            Name = "Dịch vụ vệ sinh phòng",
                            Price = 20m,
                            ServiceTypeId = 5
                        },
                        new
                        {
                            Id = 6,
                            Description = "Dịch vụ vận chuyển từ/đến sân bay",
                            IsDeleted = false,
                            Name = "Đưa đón sân bay",
                            Price = 30m,
                            ServiceTypeId = 7
                        },
                        new
                        {
                            Id = 7,
                            Description = "Truy cập vào phòng tập gym của khách sạn",
                            IsDeleted = false,
                            Name = "Truy cập Phòng Tập Gym",
                            Price = 15m,
                            ServiceTypeId = 3
                        },
                        new
                        {
                            Id = 8,
                            Description = "Dịch vụ giặt ủi cho quần áo của khách",
                            IsDeleted = false,
                            Name = "Dịch vụ Giặt là",
                            Price = 25m,
                            ServiceTypeId = 10
                        },
                        new
                        {
                            Id = 9,
                            Description = "Truy cập internet tốc độ cao trong phòng",
                            IsDeleted = false,
                            Name = "Internet tốc độ cao",
                            Price = 5m,
                            ServiceTypeId = 9
                        },
                        new
                        {
                            Id = 10,
                            Description = "Gói tour tham quan thành phố",
                            IsDeleted = false,
                            Name = "Gói Tour Thành Phố",
                            Price = 75m,
                            ServiceTypeId = 6
                        });
                });

            modelBuilder.Entity("My_Pro.Model.Entity.ServiceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ServiceTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Dịch vụ liên quan đến ẩm thực và nhà hàng.",
                            IsDeleted = false,
                            Name = "Ăn uống"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Dịch vụ giải trí như karaoke, rạp chiếu phim, v.v.",
                            IsDeleted = false,
                            Name = "Giải trí"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Các tiện ích như hồ bơi, phòng tập thể dục, spa.",
                            IsDeleted = false,
                            Name = "Tiện ích"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Các dịch vụ hỗ trợ kinh doanh như phòng họp, dịch vụ in ấn.",
                            IsDeleted = false,
                            Name = "Dịch vụ kinh doanh"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Các dịch vụ được cung cấp trực tiếp trong phòng như dịch vụ phòng ăn, room service.",
                            IsDeleted = false,
                            Name = "Dịch vụ phòng"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Cung cấp dịch vụ đặt tour, hỗ trợ du lịch.",
                            IsDeleted = false,
                            Name = "Dịch vụ du lịch"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Cung cấp dịch vụ đưa đón sân bay, thuê xe.",
                            IsDeleted = false,
                            Name = "Dịch vụ vận chuyển"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Các dịch vụ liên quan đến tổ chức hội nghị, sự kiện.",
                            IsDeleted = false,
                            Name = "Dịch vụ hội nghị"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Dịch vụ internet",
                            IsDeleted = false,
                            Name = "Dịch vụ internet"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Dịch vụ giặt ủi quần áo của khách.",
                            IsDeleted = false,
                            Name = "Dịch vụ giặt là"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("My_Pro.Model.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("My_Pro.Model.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("My_Pro.Model.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("My_Pro.Model.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("My_Pro.Model.Entity.Booking", b =>
                {
                    b.HasOne("My_Pro.Model.Entity.Room", "Rooms")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("My_Pro.Model.Entity.ApplicationUser", "Users")
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rooms");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("My_Pro.Model.Entity.BookingService", b =>
                {
                    b.HasOne("My_Pro.Model.Entity.Booking", "Bookings")
                        .WithMany("BookingServices")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("My_Pro.Model.Entity.Service", "Services")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bookings");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("My_Pro.Model.Entity.Room", b =>
                {
                    b.HasOne("My_Pro.Model.Entity.RoomType", "RoomTypes")
                        .WithMany()
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoomTypes");
                });

            modelBuilder.Entity("My_Pro.Model.Entity.RoomImage", b =>
                {
                    b.HasOne("My_Pro.Model.Entity.Room", "Rooms")
                        .WithMany("Images")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("My_Pro.Model.Entity.Service", b =>
                {
                    b.HasOne("My_Pro.Model.Entity.ServiceType", "ServiceType")
                        .WithMany()
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("My_Pro.Model.Entity.Booking", b =>
                {
                    b.Navigation("BookingServices");
                });

            modelBuilder.Entity("My_Pro.Model.Entity.Room", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
